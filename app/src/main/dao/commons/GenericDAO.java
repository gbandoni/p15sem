/*
 * Created on 19 may 2015 ( Time 10:11:01 )
 * Generated by Gustavo Bandoni
 */
package br.com.bandoni.dao.commons;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

/**
 * Generic abstract class for Android sqlite database
 *
 * @param <T> Generic abstract class
 * @author Gustavo Bandoni da Silva
 */
public abstract class GenericDAO<T>
{

    private final static int INITIAL_POSITION = 1;
    private Context context;

    /**
     * Constructor
     */

    protected GenericDAO(Context context)
    {
        super();
        this.context = context;
    }

    /**
     * Returns the SQL SELECT REQUEST to be used to retrieve the bean data from the database
     *
     * @return String
     */
    protected abstract String getSqlSelect();

    /**
     * Returns the SQL INSERT REQUEST to be used to insert the bean in the database
     *
     * @return String
     */
    protected abstract String getSqlInsert();

    /**
     * Returns the SQL UPDATE REQUEST to be used to update the bean in the database
     *
     * @return String
     */
    protected abstract String getSqlUpdate();

    /**
     * Returns the SQL DELETE REQUEST to be used to delete the bean from the database
     *
     * @return String
     */
    protected abstract String getSqlDelete();

    /**
     * Returns the SQL COUNT REQUEST to be used to check if the bean exists in the database
     *
     * @return String
     */
    protected abstract String getSqlCount();

    /**
     * Returns the SQL COUNT REQUEST to be used to count all the beans present in the database
     *
     * @return String
     */
    protected abstract String getSqlCountAll();

    /**
     * Set the primary key value(s) in the given SQLiteStatement
     *
     * @param ps   List with parameters
     * @param i    Parameter position
     * @param bean Generic abstract class
     * @throws SQLException
     */
    protected abstract void setValuesForPrimaryKey(List<String> ps, int i, T bean) throws SQLException;

    /**
     * Set the bean values in the given SQLiteStatement before SQL INSERT
     *
     * @param ps   SQLiteStatement
     * @param i    Parameter Position
     * @param bean Generic abstract class
     * @throws SQLException
     */
    protected abstract void setValuesForInsert(SQLiteStatement ps, int i, T bean) throws SQLException;

    /**
     * Set the bean values in the given SQLiteStatement before SQL UPDATE
     *
     * @param ps   SQLiteStatement
     * @param i    Parameter Position
     * @param bean Generic abstract class
     * @throws SQLException
     */
    protected abstract void setValuesForUpdate(SQLiteStatement ps, int i, T bean) throws SQLException;

    /**
     * Populates the bean attributes from the given ResultSet
     *
     * @param rs   Cursor
     * @param bean Generic abstract class
     * @return Generic abstract class
     * @throws SQLException
     */
    protected abstract T populateBean(Cursor rs, T bean) throws SQLException;

    /**
     * Loads the given bean from the database using its primary key (SQL SELECT)<br>
     * The given bean is populated from the ResultSet if found
     *
     * @param bean Generic abstract class
     * @return true if found and loaded, false if not found
     */
    protected boolean doSelect(T bean)
    {

        boolean result = false;
        Cursor c = null;
        SQLiteDatabase db = null;
        SQLiteDriver driver = null;
        try
        {
            List<String> parameters = new ArrayList<>();
            setValuesForPrimaryKey(parameters, INITIAL_POSITION, bean);
            String[] values = new String[parameters.size()];
            values = parameters.toArray(values);
            driver = SQLiteDriver.getInstance(context);
            driver.open(false);
            db = driver.getDatabase();
            c = db.rawQuery(getSqlSelect(), values);
            c.moveToFirst();
            result = (c.getCount() > 0);
            if (result)
            {
                populateBean(c, bean);
            }
        }
        catch (SQLException e)
        {
            throw new RuntimeException(e);
        }
        finally
        {
            if (driver != null)
            {
                driver.close();
            }
            if (c != null)
            {
                c.close();
            }
            if (db != null)
            {
                db.close();
            }
        }
        return result;
    }

    //-----------------------------------------------------------------------------------------

    /**
     * Insere o objeto no banco de dados (SQL INSERT)
     *
     * @param bean Generic abstract class
     */
    protected void doInsert(T bean)
    {
        SQLiteDatabase db = null;
        SQLiteStatement ps = null;
        SQLiteDriver driver = null;
        try
        {
            driver = SQLiteDriver.getInstance(context);
            driver.open(true);
            db = driver.getDatabase();
            ps = db.compileStatement(getSqlInsert());
            //--- Call specific method to set the values to be inserted
            setValuesForInsert(ps, INITIAL_POSITION, bean);
            //--- Execute SQL INSERT
            ps.executeInsert();
            ps.close();
        }
        catch (SQLException e)
        {
            throw new RuntimeException(e);
        }
        finally
        {
            if (driver != null)
            {
                driver.close();
            }
            if (ps != null)
            {
                ps.close();
            }
            if (db != null)
            {
                db.close();
            }
        }
    }

    //-----------------------------------------------------------------------------------------

    /**
     * Insere o objeto no banco de dados (SQL INSERT) with an auto-incremented columns
     *
     * @param bean Generic abstract class
     */
    protected Long doInsertAutoIncr(T bean)
    {
        Long generatedKey = 0L;
        SQLiteDatabase db = null;
        SQLiteStatement ps = null;
        SQLiteDriver driver = null;
        try
        {
            driver = SQLiteDriver.getInstance(context);
            driver.open(true);
            db = driver.getDatabase();
            ps = db.compileStatement(getSqlInsert());
            //--- Call specific method to set the values to be inserted
            setValuesForInsert(ps, INITIAL_POSITION, bean);
            //--- Execute SQL INSERT
            generatedKey = ps.executeInsert();
            ps.close();
        }
        catch (SQLException e)
        {
            throw new RuntimeException(e);
        }
        finally
        {
            if (driver != null)
            {
                driver.close();
            }
            if (ps != null)
            {
                ps.close();
            }
            if (db != null)
            {
                db.close();
            }
        }
        return generatedKey;
    }

    //-----------------------------------------------------------------------------------------

    /**
     * Atualiza o objeto no banco de dados (SQL UPDATE)
     *
     * @param bean Generic abstract class
     * @return the JDBC return code (i.e. the row count affected by the UPDATE operation : 0 or 1 )
     */
    protected int doUpdate(T bean)
    {
        SQLiteDatabase db = null;
        SQLiteStatement ps = null;
        SQLiteDriver driver = null;
        int result = 0;
        try
        {

            driver = SQLiteDriver.getInstance(context);
            driver.open(true);
            db = driver.getDatabase();
            ps = db.compileStatement(getSqlUpdate());
            //--- Call specific method to set the values to be updated and the primary key
            setValuesForUpdate(ps, INITIAL_POSITION, bean);
            //--- Execute SQL UPDATE
            result = ps.executeUpdateDelete();
            ps.close();
        }
        catch (SQLException e)
        {
            throw new RuntimeException(e);
        }
        finally
        {
            if (driver != null)
            {
                driver.close();
            }
            if (ps != null)
            {
                ps.close();
            }
            if (db != null)
            {
                db.close();
            }
        }
        return result;
    }
    //-----------------------------------------------------------------------------------------

    /**
     * Remove o objeto fornecido do banco de dados (SQL DELETE)
     *
     * @param bean Generic abstract class
     * @return the JDBC return code (i.e. the row count affected by the DELETE operation : 0 or 1 )
     */
    protected int doDelete(T bean)
    {
        int result = 0;
        SQLiteDatabase db = null;
        SQLiteDriver driver = null;
        Cursor c = null;
        try
        {
            List<String> parameters = new ArrayList<String>();
            setValuesForPrimaryKey(parameters, INITIAL_POSITION, bean);
            String[] values = new String[parameters.size()];
            values = parameters.toArray(values);
            driver = SQLiteDriver.getInstance(context);
            driver.open(true);
            db = driver.getDatabase();
            c = db.rawQuery(getSqlDelete(), values);
            c.moveToFirst();
            result = c.getCount();
        }
        catch (SQLException e)
        {
            throw new RuntimeException(e);
        }
        finally
        {
            if (driver != null)
            {
                driver.close();
            }
            if (c != null)
            {
                c.close();
            }
            if (db != null)
            {
                db.close();
            }
        }
        return result;
    }

    //-----------------------------------------------------------------------------------------

    /**
     * Checks if the given bean exists in the database (SQL SELECT COUNT(*) )
     *
     * @param bean Generic abstract class
     * @return Boolean
     */
    protected boolean doExists(T bean)
    {

        boolean result = false;
        Cursor c = null;
        SQLiteDatabase db = null;
        SQLiteDriver driver = null;
        try
        {
            List<String> parameters = new ArrayList<String>();
            setValuesForPrimaryKey(parameters, INITIAL_POSITION, bean);
            String[] values = new String[parameters.size()];
            values = parameters.toArray(values);
            driver = SQLiteDriver.getInstance(context);
            driver.open(false);
            db = driver.getDatabase();
            c = db.rawQuery(getSqlCount(), values);
            c.moveToFirst();
            result = (c.getCount() > 0);
        }
        catch (SQLException e)
        {
            throw new RuntimeException(e);
        }
        finally
        {
            if (driver != null)
            {
                driver.close();
            }
            if (c != null)
            {
                c.close();
            }
            if (db != null)
            {
                db.close();
            }
        }
        return result;
    }
    //-----------------------------------------------------------------------------------------

    /**
     * Counts all the occurrences in the table ( SQL SELECT COUNT(*) )
     *
     * @return long
     */
    protected long doCountAll()
    {

        long result = 0;
        Cursor c = null;
        SQLiteDatabase db = null;
        SQLiteDriver driver = null;
        try
        {
            String[] values = new String[]{};
            driver = SQLiteDriver.getInstance(context);
            driver.open(false);
            db = driver.getDatabase();
            c = db.rawQuery(getSqlCountAll(), values);
            c.moveToFirst();
            result = c.getCount();
        }
        catch (Exception e)
        {
            throw new RuntimeException(e);
        }
        finally
        {
            if (driver != null)
            {
                driver.close();
            }
            if (c != null)
            {
                c.close();
            }
            if (db != null)
            {
                db.close();
            }
        }
        return result;
    }

    //-----------------------------------------------------------------------------------------

    protected void setValue(SQLiteStatement ps, int i, String value) throws SQLException
    {
        ps.bindString(i, value);
    }

    //-----------------------------------------------------------------------------------------
    protected void setValue(SQLiteStatement ps, int i, java.util.Date value) throws SQLException
    {
        if (value != null)
        {
            ps.bindString(i, new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(value));
        }
        else
        {
            ps.bindString(i, "");
        }
    }

    //-----------------------------------------------------------------------------------------
    protected void setValue(SQLiteStatement ps, int i, java.sql.Date value) throws SQLException
    {
        ps.bindString(i, value.toString());
    }

    //-----------------------------------------------------------------------------------------
    protected void setValue(SQLiteStatement ps, int i, java.sql.Time value) throws SQLException
    {
        ps.bindString(i, value.toString());
    }

    //-----------------------------------------------------------------------------------------
    protected void setValue(SQLiteStatement ps, int i, java.sql.Timestamp value) throws SQLException
    {
        ps.bindString(i, value.toString());
    }

    //-----------------------------------------------------------------------------------------
    protected void setValue(SQLiteStatement ps, int i, Byte value) throws SQLException
    {
        if (value != null)
        {
            ps.bindLong(i, value.byteValue());
        }
        else
        {
            ps.bindLong(i, 0);
        }
    }

    //-----------------------------------------------------------------------------------------
    protected void setValue(SQLiteStatement ps, int i, Short value) throws SQLException
    {
        if (value != null)
        {
            ps.bindLong(i, value.shortValue());
        }
        else
        {
            ps.bindLong(i, 0);
        }
    }

    //-----------------------------------------------------------------------------------------
    protected void setValue(SQLiteStatement ps, int i, Integer value) throws SQLException
    {
        if (value != null)
        {
            ps.bindLong(i, value.intValue());
        }
        else
        {
            ps.bindLong(i, 0);
        }
    }

    //-----------------------------------------------------------------------------------------
    protected void setValue(SQLiteStatement ps, int i, Long value) throws SQLException
    {
        if (value != null)
        {
            ps.bindLong(i, value.intValue());
        }
        else
        {
            ps.bindLong(i, 0);
        }
    }

    //-----------------------------------------------------------------------------------------
    protected void setValue(SQLiteStatement ps, int i, Float value) throws SQLException
    {
        if (value != null)
        {
            ps.bindDouble(i, value.floatValue());
        }
        else
        {
            ps.bindDouble(i, 0.0);
        }
    }

    //-----------------------------------------------------------------------------------------
    protected void setValue(SQLiteStatement ps, int i, Double value) throws SQLException
    {
        if (value != null)
        {
            ps.bindDouble(i, value.doubleValue());
        }
        else
        {
            ps.bindDouble(i, 0.0);
        }
    }

    //-----------------------------------------------------------------------------------------
    protected void setValue(SQLiteStatement ps, int i, BigDecimal value) throws SQLException
    {
        ps.bindDouble(i, value.doubleValue());
    }

    //-----------------------------------------------------------------------------------------
    protected void setValue(SQLiteStatement ps, int i, byte[] value) throws SQLException
    {
        ps.bindBlob(i, value);
    }

    protected void setRawParameter(List<String> ps, String value) throws SQLException
    {
        ps.add(value);
    }

    protected void setRawParameter(List<String> ps, Integer value) throws SQLException
    {
        ps.add(value.toString());
    }

    protected void setRawParameter(List<String> ps, int value) throws SQLException
    {
        ps.add(value+"");
    }

}

